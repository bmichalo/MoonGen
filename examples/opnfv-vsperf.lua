-- vim:ts=4:sw=4:noexpandtab
--- This script can be used to determine if a device is affected by the corrupted packets
--  that are generated by the software rate control method.
--  It generates CBR traffic via both methods and compares the resulting latency distributions.
--  TODO: this module should also test L3 traffic (but not just L3 due to size constraints (timestamping limitations))
local dpdk		= require "dpdk"
local memory	= require "memory"
local ts		= require "timestamping"
local device	= require "device"
local filter	= require "filter"
local timer		= require "timer"
local stats		= require "stats"
local hist		= require "histogram"

-- required here because this script creates *a lot* of mempools
memory.enableCache()

local REPS = 1
local run_time = 60
local LATENCY_TRIM = 3000 -- time in ms to delayied start and early end to latency mseasurement, so we are certain main packet load is present
local FRAME_SIZE = 64
local BIDIREC = 0 --do not do bidirectional test
local LATENCY = 0 --do not get letency measurements
local MAX_FRAME_LOSS = 0
local LINE_RATE = 10000000000 -- 10Gbps
local RATE_RESOLUTION = 0.02
local ETH_DST   = "10:11:12:13:14:15" -- src mac is taken from the NIC
local IP_SRC    = "192.168.0.10"
local IP_DST    = "10.0.0.1"
local PORT_SRC  = 1234
local PORT_DST  = 1234
local NUM_FLOWS = 256 -- src ip will be IP_SRC + (0..NUM_FLOWS-1)

function master(...)
	local port1, port2, frame_size, bidirec, max_acceptable_frame_loss, num_flows, max_line_rate_Mfps = tonumberall(...)
        if not port1 or not port2 then
		errorf("usage: port1 port2 [frame_size bidirec max_acceptable_frame_loss num_flows max_rate]")
	end
	frame_size = frame_size or FRAME_SIZE
	bidirec = bidirec or BIDIREC
	max_acceptable_frame_loss = max_acceptable_frame_loss or MAX_FRAME_LOSS
	max_line_rate_Mfps = max_line_rate_Mfps or (LINE_RATE /(frame_size*8 +64 +96) /1000000) --max_line_rate_Mfps is in millions per second
	num_flows = num_flows or NUM_FLOWS
        -- The allowed frame loss (percent)
	rate_resolution = RATE_RESOLUTION
	latency = LATENCY

	-- assumes port1 and port2 are not the same
	local devs = {}
	local numQueues = 1 
	if (bidirec == 1) then
		numQueues = numQueues + 1 
	end
	if (latency == 1) then
		numQueues = numQueues + 1 
	end
	devs[1] = device.config(port1, numQueues, numQueues)
	devs[2] = device.config(port2, numQueues, numQueues)

	device.waitForLinks()
	local prevRate = 0
	local prevPassRate = 0
	local frame_loss = 0
	local prevFailRate = max_line_rate_Mfps
	local rate = max_line_rate_Mfps
        -- local method = "hardware"
	local method = "software"
        local final_validation_ctr = 0

	while ( math.abs(rate - prevRate) > rate_resolution or final_validation_ctr < 1 ) do
		-- r = {frame_loss, rxMpps, total_rx_frames, total_tx_frames}
	        r = {dev1_frame_loss, dev1_rxMpps, dev1_total_x_frames, dev1_total_rx_frames, dev2_frame_loss, dev2_rxMpps, dev2_total_tx_frames, dev2_total_rx_frames, avg_device_frame_loss, aggregate_avg_rxMpps, dev1_frame_loss, dev2_frame_loss}
                printf("TOP OF WHILE LOOP:  Testing with prevPassRate = %.2f, prevFailRate = %.2f, prevRate = %.2f, rate = %.2f", prevPassRate, prevFailRate, prevRate, rate); 
		launchTest(devs[1], devs[2], rate, bidirec, 0, frame_size, run_time, num_flows, method, r)
		local avg_device_frame_loss = r[9]
		local aggregate_avg_rxMpps = r[10]
                
                -- total_tx_frames = r[3]
                -- total_rx_frames = r[4]
		prevRate = rate
	        if avg_device_frame_loss > max_acceptable_frame_loss then --failed to have <= max_acceptable_frame_loss, lower rate
                        printf("*********************************************************************************************************************************");
			printf("* Test Result:  FAILED - The traffic throughput loss was %.8f %%, which is higher than the maximum allowed (%.2f %%) loss", avg_device_frame_loss, max_acceptable_frame_loss);
                        printf("*********************************************************************************************************************************");
			prevFailRate = rate
			rate = ( prevPassRate + rate ) / 2
                        printf("FAIL WHILE LOOP:  Testing with prevPassRate = %.2f, prevFailRate = %.2f, prevRate = %.2f, 'new'rate = %.2f", prevPassRate, prevFailRate, prevRate, rate); 
		else --acceptable packet loss, increase rate
                        printf("*********************************************************************************************************************************");
			printf("* Test Result:  PASSED - The traffic thoughput loss was %.8f %%, was did not exceed the maximum allowed loss (%.2f %%)", avg_device_frame_loss, max_acceptable_frame_loss);
                        printf("*********************************************************************************************************************************");
			prevPassRate = rate
			rate = (prevFailRate + rate ) / 2
                        printf("PASS WHILE LOOP:  Testing with prevPassRate = %.2f, prevFailRate = %.2f, prevRate = %.2f, 'new'rate = %.2f", prevPassRate, prevFailRate, prevRate, rate); 
		end
		printf("\n")
		dpdk.sleepMillis(500)
		if not dpdk.running() then
			break
		end
		printf("\n")

	        if math.abs(rate - prevRate) < rate_resolution then
                
	            r = {dev1_frame_loss_pct, dev1_rxMpps, dev1_total_tx_frames, dev1_total_rx_frames, dev2_frame_loss_pct, dev2_rxMpps, dev2_total_tx_frames, dev2_total_rx_frames, avg_device_frame_loss, aggregate_avg_rxMpps, dev1_frame_loss, dev2_frame_loss}
                    printf("\n");
                    printf("*********************************************************************************************");
	            printf("* Starting final validation");
                    printf("*********************************************************************************************");
                    printf("\n\n");
                    printf("VALIDATION WHILE LOOP:  Testing with prevPassRate = %.2f, prevFailRate = %.2f, prevRate = %.2f, rate = %.2f", prevPassRate, prevFailRate, prevRate, rate); 
	            launchTest(devs[1], devs[2], prevPassRate, bidirec, latency, frame_size, run_time, num_flows, method, r)
                    printf("\n\n");
                    printf("*********************************************************************************************");
	            printf("* Stopping final validation");
                    printf("*********************************************************************************************");
                    printf("\n\n");
	            local dev1_frame_loss_pct = r[1]
	            local dev1_rxMpps = r[2]
                    local dev1_total_tx_frames = 0
                    local dev1_total_rx_frames = 0
                    local dev1_total_tx_frames = r[3]
                    local dev1_total_rx_frames = r[4]
	            local dev2_frame_loss_pct = r[5]
	            local dev2_rxMpps = r[6]
                    local dev2_total_tx_frames = 0
                    local dev2_total_rx_frames = 0
                    dev2_total_tx_frames = r[7]
                    dev2_total_rx_frames = r[8]
                    local avg_device_frame_loss = r[9]
                    local aggregate_avg_rxMpps = r[10]
	            local dev1_frame_loss = r[11]
	            local dev2_frame_loss = r[12]
                    
                    if (avg_device_frame_loss) > max_acceptable_frame_loss then

                        printf("\n");
                        printf("*********************************************************************************************");
                        printf("* Final Validation Test Result:  FAILED\n" ..
                               "*     The validation of %.2f Mfps failed because the traffic throughput loss was %.8f %%, \n" ..
                               "*     which is higher than the maximum allowed (%.2f %%) loss", 
                               aggregate_avg_rxMpps, avg_device_frame_loss, max_acceptable_frame_loss);
                        printf("*********************************************************************************************");
                        printf("\n");
			
                        --prevFailRate = prevPassRate
                        --prevPassRate = prevPassRate * 0.80
			--rate = prevPassRate 
                        prevFailRate = prevPassRate
                        prevPassRate = 0
			rate = ( prevPassRate + rate ) / 2

	            else
                        printf("\n");
                        printf("*********************************************************************************************");
                        printf("* Final Validation Test Result:  PASSED\n" ..
                               "*     The validation of %.2f Mfps passed because the traffic throughput loss was %.8f %%, \n" ..
                               "*     which did not exceed the maximum allowed (%.2f %%) loss", 
                               aggregate_avg_rxMpps, avg_device_frame_loss, max_acceptable_frame_loss);
                        printf("*********************************************************************************************");
                        printf("\n");

                        printf("#############################################################################################\n");
                        printf("RFC 2544 Test Results Summary From Final Validation\n\n");

	                printf("Measured Aggregate Average Throughput (Mfps) ................ %.2f", aggregate_avg_rxMpps);
	                printf("Frame Size .................................................. %d", frame_size);
                        
                        if (bidirec == 1) then
	                    printf("Traffic Flow Direction ...................................... Bidirectional");
	                    printf("Maximum Theoretical Line Rate Throughput (Mfps) ............. %.2f", 2 * max_line_rate_Mfps);
                        else
	                    printf("Traffic Flow Direction ...................................... Unidirectional");
	                    printf("Maximum Theoretical Line Rate Throughput (Mfps) ............. %.2f", max_line_rate_Mfps);
                        end

	                printf("Number of Data Flows ........................................ %d", num_flows);
	                printf("Rate Resolution (%%) ......................................... %.2f", rate_resolution);
	                printf("Maximum Acceptable Frame Loss (%%) ........................... %.2f", max_acceptable_frame_loss);
                        printf("\n");
	                printf("Network Device ID ........................................... %d", port1);
                        printf("    Average Rx Frame Count (Mfps) ........................... %.2f", dev1_rxMpps);
                        printf("    Rx Frame Count .......................................... %d", dev1_total_rx_frames);
                        printf("    Tx Frame Count .......................................... %d", dev1_total_tx_frames);
                        printf("    Frame Loss .............................................. %d", dev1_frame_loss);
                        printf("\n");
	                printf("Network Device ID ........................................... %d", port2);
                        printf("    Average Rx Frame Count (Mfps) ........................... %.2f", dev2_rxMpps);
                        printf("    Rx Frame Count .......................................... %d", dev2_total_rx_frames);
                        printf("    Tx Frame Count .......................................... %d", dev2_total_tx_frames);
                        printf("    Frame Loss .............................................. %d\n", dev2_frame_loss);
                        printf("#############################################################################################\n");
                        printf("\n\n");
                        final_validation_ctr = 1
	            end
		    printf("\n")
		    dpdk.sleepMillis(500)
		    if not dpdk.running() then
		    	break
		    end
		    printf("\n")
		end
	end

        -- run_time = run_time * 2 --use a longer runtime for final validation
	printf("\n")
	dpdk.sleepMillis(500)
end

function launchTest(dev1, dev2, rate, bidirec, latency, frame_size, run_time, num_flows, method, t)
		-- t = {frame_loss, rxMpps}

		local total_rate = rate
		local qid = 0

		if (bidirec == 1) then
			total_rate = rate * 2
		end


                printf("\n\nInside launchTest.  rate = %.2f, bidirec = %d, latency = %d, frame_size = %d, run_time = %d, num_flows = %d, method = %s\n\n", rate, bidirec, latency, frame_size, run_time, num_flows, method);

                printf("*********************************************************************************");
		printf("* Testing frame rate (millions per second) with %s rate control: %.2f", method , total_rate)
                printf("*********************************************************************************");
		dev1:getTxQueue(qid):setRateMpps(method == "hardware" and rate or 0)
		loadTask1a = dpdk.launchLua("loadSlave", dev1:getTxQueue(qid), dev2:getRxQueue(qid), method == "software" and rate, frame_size, run_time, num_flows)
		qid = qid + 1

		if (bidirec == 1) then
			dev2:getTxQueue(qid):setRateMpps(method == "hardware" and rate or 0)
			loadTask1b = dpdk.launchLua("loadSlave", dev2:getTxQueue(qid), dev1:getRxQueue(qid), method == "software" and rate, frame_size, run_time, num_flows)
			qid = qid + 1
		end

		if (latency == 1) then
			loadTask2a = dpdk.launchLua("timerSlave", dev1:getTxQueue(qid), dev2:getRxQueue(qid), frame_size, run_time, num_flows)
			qid = qid + 1
		end

		local dev1_total_frame_loss_pct = 0 
		local dev1_avg_rxMpps = 0
                local dev1_total_tx_frames = 0
                local dev1_total_rx_frames = 0
		local dev2_total_frame_loss_pct = 0
		local dev2_avg_rxMpps = 0
                local dev2_total_tx_frames = 0
                local dev2_total_rx_frames = 0
                local avg_device_frame_loss = 0
                local aggregate_avg_rxMpps = 0
                local dev1_total_frame_loss = 0
                local dev2_total_frame_loss = 0
                
                
		local r1 = {}
		r1 = loadTask1a:wait()
		dev1_total_frame_loss_pct = r1[1]
		dev1_avg_rxMpps = r1[2]
                dev1_total_tx_frames = r1[3]
                dev2_total_rx_frames = r1[4]
		dev2_total_frame_loss = r1[5]
                
		if (bidirec == 1) then
			local r2 = {}
			r2 = loadTask1b:wait()

		        dev2_total_frame_loss_pct = r2[1]
		        dev2_avg_rxMpps = r2[2]
                        dev2_total_tx_frames = r2[3];
                        dev1_total_rx_frames = r2[4];
		        dev1_total_frame_loss = r2[5]

			-- total_frame_loss_pct = (r1[1] +r2[1]) /2
			-- total_rxMpps = r1[2] +r2[2]
		end


                avg_device_frame_loss = (dev1_total_frame_loss_pct + dev2_total_frame_loss_pct) / 2
                aggregate_avg_rxMpps = dev1_avg_rxMpps + dev2_avg_rxMpps
                
		if (latency == 1) then
			loadTask2a:wait()
		end

		t[1] = dev1_total_frame_loss_pct
		t[2] = dev1_avg_rxMpps
                t[3] = dev1_total_tx_frames
                t[4] = dev1_total_rx_frames
		t[5] = dev2_total_frame_loss_pct
		t[6] = dev2_avg_rxMpps
                t[7] = dev2_total_tx_frames
                t[8] = dev2_total_rx_frames
                t[9] = avg_device_frame_loss
                t[10] = aggregate_avg_rxMpps
		t[11] = dev1_total_frame_loss
		t[12] = dev2_total_frame_loss
end

function loadSlave(txQueue, rxQueue, rate, frame_size, run_time, num_flows)
	local frame_size_without_crc = frame_size - 4
	-- TODO: this leaks memory as mempools cannot be deleted in DPDK
	local mem = memory.createMemPool(function(buf)
		buf:getUdpPacket():fill{
			pktLength = frame_size_without_crc, -- this sets all length headers fields in all used protocols
			ethSrc = txQueue, -- get the src mac from the device
			ethDst = ETH_DST,
			-- ipSrc will be set later as it varies
			ip4Dst = IP_DST,
			udpSrc = PORT_SRC,
			udpDst = PORT_DST,
			-- payload will be initialized to 0x00 as new memory pools are initially empty
		}
	end)
	local bufs = mem:bufArray()
	local runtime = timer:new(run_time)
	local rxStats = stats:newDevRxCounter(rxQueue, "plain")
	local txStats = stats:newDevTxCounter(txQueue, "plain")
	local count = 0
	local baseIP = parseIPAddress(IP_SRC)
	while runtime:running() and dpdk.running() do
		bufs:alloc(frame_size_without_crc)
                for _, buf in ipairs(bufs) do
			local pkt = buf:getUdpPacket()
			-- Using random here tends to slow down the Tx rate
			-- pkt.ip4.src:set(baseIP + math.random(num_flows) - 1)
			-- For now, just increment with count and limit with num_flows
			-- Later, maybe consider pre-allocating a list of random IPs
			pkt.ip4.src:set(baseIP + count % num_flows)
		end
                bufs:offloadUdpChecksums()
		if rate then
			for _, buf in ipairs(bufs) do
				buf:setRate(rate)
			end
			txQueue:sendWithDelay(bufs)
		else
			txQueue:send(bufs)
		end
		rxStats:update()
		txStats:update()
		count = count + 1
	end
	dpdk.sleepMillis(500)
	rxStats:update()
	txStats:update()
	txStats:finalize()
	rxStats:finalize()
	--stats.name, direction,
	--stats.mpps.avg, stats.mpps.stdDev,
	--stats.mbit.avg, stats.mbit.stdDev,
	--stats.wireMbit.avg, stats.wireMbit.stdDev
	local loss = txStats.total - rxStats.total
	if (loss < 0 ) then
		loss = 0
	end
	local pct_loss = loss / txStats.total * 100
	--printf("loop count: %d  frames dropped: %d (%.8f%%)", count, loss, loss / txStats.total * 100)
	--printf("Mpps: %.2f", rxStats.mpps.avg)
	local results = {pct_loss, rxStats.mpps.avg, txStats.total, rxStats.total, loss}
	return results
end

function timerSlave(txQueue, rxQueue, frame_size, run_time, num_flows, bidirec)
	local frame_size_without_crc = frame_size - 4
	local rxDev = rxQueue.dev
	rxDev:filterTimestamps(rxQueue)
	local timestamper = ts:newUdpTimestamper(txQueue, rxQueue)
	local hist = hist()
	-- timestamping starts after and finishes before the main packet load starts/finishes
	dpdk.sleepMillis(LATENCY_TRIM)
	local runtime = timer:new(run_time - LATENCY_TRIM/1000*2)
	local baseIP = parseIPAddress(IP_SRC)
	local rateLimit = timer:new(0.01)
	while runtime:running() and dpdk.running() do
		--local port = math.random(2048)
		--local lat = timestamper:measureLatency(frame_size_without_crc, function(buf)
		--	local pkt = buf:getUdpPacket()
		--	pkt:fill{
		--		pktLength = frame_size_without_crc, -- this sets all length headers fields in all used protocols
		--		ethSrc = txQueue, -- get the src mac from the device
		--		ethDst = ETH_DST,
		--		-- ipSrc will be set later as it varies
		--		ip4Dst = IP_DST,
		--		udpSrc = PORT_SRC,
		--		udpDst = port,
		--	}
		--	pkt.ip4.src:set(baseIP + math.random(NUM_FLOWS) - 1)
		--end)
		--if lat then
		--	hist:update(lat)
		--end
		rateLimit:wait()
		local lat = timestamper:measureLatency();
		if (lat) then
                	hist:update(lat)
		end
		rateLimit:reset()
	end
	dpdk.sleepMillis(LATENCY_TRIM + 1000) -- the extra 1000 ms ensures the stats are output after the throughput stats
	hist:save("hist.csv")
	hist:print("Histogram")
end
